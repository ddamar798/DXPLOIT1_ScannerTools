# modules/exploitation/mapper.py
"""
Map detected services to recommended tools/modules.
Returns dict: {service_name: [(tool_key, reason), ...], ...}
"""
from typing import Dict, List, Tuple

RECOMMEND_MAP = {
    "http": [("nuclei","Template-based vuln scan (fast)"), ("nikto","web misconfig baseline"), ("ffuf","directory fuzzing"), ("sqlmap","SQL injection automation")],
    "https": [("nuclei","Template-based vuln scan (fast)"), ("nikto","web misconfig baseline"), ("ffuf","directory fuzzing"), ("sqlmap","SQL injection automation")],
    "ssh": [("patator_ssh","SSH brute (patator)"), ("impacket_smbclient","Impacket tools for SMB/AD")],
    "ftp": [("patator_ftp","FTP brute (patator)"), ("nikto","web/ftp misconfig")],
    "smb": [("cme_smb","CrackMapExec for SMB & AD ops"), ("impacket_smbclient","Impacket smbclient")],
    "mysql": [("hydra","Brute force MySQL"), ("sqlmap","If web endpoint leads to MySQL")],
    "postgresql": [("hydra","Brute force Postgres"), ("psql","Manual DB enumeration")],
    "redis": [("impacket_redis","Redis checks (no-auth)"),],
}

def recommend_for_scan(scan_results: Dict) -> Dict[str, List[Tuple[str,str]]]:
    rec = {}
    for host in scan_results.get("hosts", []):
        for p in host.get("ports", []):
            if p.get("state") != "open":
                continue
            svc = (p.get("service") or p.get("product") or "").lower()
            # map by substring
            matched = None
            for key in RECOMMEND_MAP.keys():
                if key in svc or (key == "http" and p.get("port") in (80,8080,8000)) or (key=="smb" and p.get("port") in (139,445)):
                    matched = key
                    break
            if not matched:
                # fallback by port heuristics
                port = p.get("port")
                if port == 22: matched="ssh"
                elif port in (80,443,8000,8080): matched="http"
                elif port in (3306,33060): matched="mysql"
                elif port == 5432: matched="postgresql"
                elif port in (137,139,445): matched="smb"
            if matched:
                rec.setdefault(matched, [])
                for tup in RECOMMEND_MAP.get(matched, []):
                    if tup not in rec[matched]:
                        rec[matched].append(tup)
    return rec
