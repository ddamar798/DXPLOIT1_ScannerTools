# modules/exploitation/executor.py
import os, shlex, subprocess, time
from typing import List, Tuple, Dict, Any
from core.utils import now_iso, save_json, ensure_dir, safe_input

LOG_DIR = os.path.join("data","exploit_logs")
ensure_dir(LOG_DIR)

# Command builders
def cmd_sqlmap(target: str, mode: str, extra: Dict[str,Any]) -> List[str]:
    cmd = ["sqlmap","-u", target, "--batch","--output-dir", LOG_DIR]
    if mode == "silent":
        cmd += ["--threads","1","--timeout","10"]
    elif mode == "brutal":
        cmd += ["--threads","10"]
    if extra.get("data"):
        cmd += ["--data", extra["data"]]
    if extra.get("cookie"):
        cmd += ["--cookie", extra["cookie"]]
    return cmd

def cmd_nuclei(target: str, mode: str, extra: Dict[str,Any]) -> List[str]:
    out = os.path.join(LOG_DIR, f"nuclei_{target.replace('/','_')}.txt")
    cmd = ["nuclei","-target",target,"-o",out]
    if mode == "silent":
        cmd += ["-rl","50"]
    elif mode == "brutal":
        cmd += ["-rl","500"]
    if extra.get("templates"):
        cmd += ["-t", extra["templates"]]
    return cmd

def cmd_nikto(target: str, mode:str, extra:Dict[str,Any]) -> List[str]:
    outfile = os.path.join(LOG_DIR, f"nikto_{target.replace('/','_')}.txt")
    cmd = ["nikto","-h",target,"-o",outfile]
    return cmd

def cmd_ffuf(target: str, mode:str, extra:Dict[str,Any]) -> List[str]:
    pattern = extra.get("pattern") or f"{target}/FUZZ"
    wordlist = extra.get("wordlist") or "/usr/share/wordlists/dirb/common.txt"
    out = os.path.join(LOG_DIR, f"ffuf_{target.replace('/','_')}.json")
    cmd = ["ffuf","-u",pattern,"-w",wordlist,"-o",out,"-of","json"]
    if mode == "silent":
        cmd += ["-t","10"]
    elif mode == "brutal":
        cmd += ["-t","50"]
    return cmd

def cmd_patator_ssh(target, mode, extra):
    userfile = extra.get("userfile","/usr/share/wordlists/users.txt")
    passfile = extra.get("passfile","/usr/share/wordlists/rockyou.txt")
    return ["patator","ssh_login",f"host={target}",f"user={userfile}",f"password={passfile}","ssh_timeout=5","log=patator_ssh.log"]

def cmd_cme_smb(target, mode, extra):
    cmd = ["crackmapexec","smb", target, "--shares"]
    if extra.get("username") and extra.get("password"):
        cmd += ["-u", extra["username"], "-p", extra["password"]]
    if mode == "silent":
        cmd += ["--no-bruteforce"]
    return cmd

TOOL_BUILDERS = {
    "sqlmap": (cmd_sqlmap, "sqlmap - automated SQL injection & DB takeover"),
    "nuclei": (cmd_nuclei, "nuclei - template based scanner"),
    "nikto": (cmd_nikto, "nikto - web server scanner"),
    "ffuf": (cmd_ffuf, "ffuf - directory fuzzing"),
    "patator_ssh": (cmd_patator_ssh, "patator - SSH brute"),
    "cme_smb": (cmd_cme_smb, "CrackMapExec - SMB/AD toolkit"),
}

def stream_subprocess(cmd: List[str], logbase: str) -> Dict[str,Any]:
    stdout_path = os.path.join(LOG_DIR, f"{logbase}.out")
    stderr_path = os.path.join(LOG_DIR, f"{logbase}.err")
    with open(stdout_path,"w",encoding="utf-8",errors="ignore") as so, open(stderr_path,"w",encoding="utf-8",errors="ignore") as se:
        print(f"[+] Running: {' '.join(shlex.quote(c) for c in cmd)}")
        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, bufsize=1)
        while True:
            out = proc.stdout.readline()
            err = proc.stderr.readline()
            if out:
                print(out.rstrip())
                so.write(out)
            if err:
                print(err.rstrip())
                se.write(err)
            if out == "" and err == "" and proc.poll() is not None:
                break
        rc = proc.returncode
    return {"rc": rc, "stdout": stdout_path, "stderr": stderr_path}

def choose_tool_and_run_for_service(service_info: Dict[str,Any], recommendations: List[Tuple[str,str]], mode: str):
    print("\nRecommendations for service:")
    for i, r in enumerate(recommendations,1):
        print(f" [{i}] {r[0]} - {r[1]}")
    choice = safe_input("Pilih tool index (or 'n' to skip): ").strip()
    if choice.lower() == "n":
        return None
    try:
        idx = int(choice)-1
        tool_key = recommendations[idx][0]
    except Exception:
        print("[!] Invalid selection")
        return None
    if tool_key not in TOOL_BUILDERS:
        print("[!] Tool not available in registry.")
        return None
    # confirm brutal mode
    if mode=="brutal":
        c = safe_input("Brutal mode: type YES to confirm: ")
        if c != "YES":
            print("Aborted.")
            return None
    # gather extras interactively
    extras = {}
    if tool_key=="sqlmap":
        url = safe_input("Masukkan URL target untuk sqlmap (contoh http://host/page.php?id=1): ").strip()
        if not url:
            print("[!] No url provided")
            return None
        extras["data"] = safe_input("POST data (enter if none): ").strip()
        extras["cookie"] = safe_input("Cookie (enter if none): ").strip()
        target = url
    else:
        target = f"{service_info.get('address')}:{service_info.get('port')}" if service_info.get('address') else service_info.get('address') or service_info.get('target')

    builder, desc = TOOL_BUILDERS[tool_key]
    cmd = builder(target, mode, extras)
    logbase = f"{tool_key}_{service_info.get('address')}_{service_info.get('port')}_{now_iso().replace(':','-')}"
    meta = stream_subprocess(cmd, logbase)
    # save metadata
    meta_record = {"tool": tool_key, "cmd": cmd, "mode": mode, "meta": meta, "service": service_info}
    meta_path = os.path.join(LOG_DIR, f"{logbase}.meta.json")
    save_json(meta_path, meta_record)
    print(f"[+] Execution metadata saved: {meta_path}")
    return meta_record
